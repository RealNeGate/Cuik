name: CI
on: [pull_request, workflow_dispatch, push]

jobs:
  build_win:
    runs-on: windows-2022
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - uses: seanmiddleditch/gha-setup-ninja@v6

      - uses: ilammy/msvc-dev-cmd@v1
      - uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: "5.3.0"

      - name: Download Submodules
        run: git submodule update --init --recursive

      - name: Build Cuik
        shell: cmd
        timeout-minutes: 10
        run: lua build.lua -driver

      - name: Build Cuik DLL
        shell: cmd
        timeout-minutes: 10
        run: lua build.lua -shared -cuik -tb

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cuik-windows
          path: bin/cuik.exe

      - name: upload dll artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cuik-windows
          path: bin/cuik.dll
  build_linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Download LLVM & Lua
        run: sudo apt-get install llvm clang lld lua5.3

      - name: Download Submodules
        run: git submodule update --init --recursive

      - name: Build Cuik
        run: lua build.lua -driver
        timeout-minutes: 10

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cuik-linux
          path: bin/cuik
  tb_unittests:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    if: github.ref == 'refs/heads/aaa'
    steps:
      - uses: actions/checkout@v3

      - uses: seanmiddleditch/gha-setup-ninja@v6

      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'

      - uses: leafo/gh-actions-lua@v10
        if: runner.os == 'Windows'
        with:
          luaVersion: "5.3.0"

      - name: Download LLVM & Lua
        if: runner.os == 'Linux'
        run: sudo apt-get install llvm clang lld lua5.3

      - name: Download Submodules
        run: git submodule update --init --recursive

      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: cmd
        timeout-minutes: 5
        run: lua build.lua -debug -tb_unittests

      - name: Build
        if: runner.os != 'Windows'
        timeout-minutes: 5
        run: lua build.lua -debug -tb_unittests

      - name: Run TB unittests
        timeout-minutes: 5
        run: ./bin/tb_unittests
  release:
    runs-on: ubuntu-latest
    needs: [build_win, build_linux]
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3
      - name: delete tag
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/latest',
              sha: context.sha
            })
      - name: create tag
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/latest',
              sha: context.sha
            })

      - uses: actions/download-artifact@v4

      - name: Bundle
        run: |
          zip -r cuik-windows.zip cuik-windows/cuik.exe cuik-windows/cuik.dll
          tar czf cuik-linux.tar.gz cuik-linux/cuik

      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          release_name: latest
          draft: false
          prerelease: true

      - name: upload windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: cuik-windows.zip
          asset_name: cuik-windows.zip
          asset_content_type: application/zip

      - name: upload linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: cuik-linux.tar.gz
          asset_name: cuik-linux.tar.gz
          asset_content_type: application/gzip
